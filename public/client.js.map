{"version":3,"file":"client.js","sources":["webpack:///src/index.jsx","webpack:///src/app/app.jsx","webpack:///src/app/fetchMethods.js","webpack:///./src/app/_app.scss"],"sourcesContent":["import 'babel-polyfill'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './app/app'\nimport './app/_app.scss'\n\nconst mute = (function () {\n  const iterateLogs = function (config) {\n    for (let prop in console) {\n      config.iteratee(prop)\n    }\n  }\n  const noop = function () {}\n  const logs = function (muted) {\n    var muted = typeof muted !== 'undefined' ? muted : false\n    iterateLogs({\n      iteratee: function (prop) {\n        if (muted === true) console[prop] = noop\n        else if (muted === false) delete console[prop]\n      }\n    })\n  }\n  return { logs }\n})()\n\n// suppress all logs in production mode\nif (process.env.NODE_ENV === 'production') mute.logs(true)\n\nReactDOM.render(<App />, document.getElementById('client'))\n\n\n\n// WEBPACK FOOTER //\n// src/index.jsx","import React, { Component } from 'react'\n\nimport { getColumns } from './fetchMethods'\nexport default class App extends Component {\n  state = {\n    column: ''\n  }\n\n  selectColumn = ({ id, value }) => {\n    this.setState({ [id]: value })\n  }\n\n  render () {\n    const { column } = this.state\n\n    return (\n      <div>\n        <ColumnDropdown value={column} selectColumn={this.selectColumn} />\n      </div>\n    )\n  }\n}\n\nclass ColumnDropdown extends Component {\n  state = {\n    columns: [],\n    isLoading: false\n  }\n\n  componentWillMount () {\n    const columns = getColumns()\n    this.setState({ isLoading: true })\n    if (columns) {\n      this.setState({ columns, isLoading: false })\n    }\n  }\n\n  generateOptions = () => {\n    const { columns } = this.state\n    return columns.map(column => (\n      <option key={column} value={column}>{column}</option>\n    ))\n  }\n\n  render () {\n    const { value, selectColumn } = this.props\n    const { isLoading, columns } = this.state\n\n    return (\n      <div>\n        {isLoading && <div>Loading...</div>}\n        {columns.length > 0 &&\n          <select id='column' value={value} onChange={selectColumn}>\n            {this.generateOptions()}\n          </select>}\n      </div>\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/app/app.jsx","import axios from 'axios'\n\nconst BASE_URL = 'http://localhost:5000'\n\nexport async function getColumns () {\n  const url = `${BASE_URL}/get_columns`\n  try {\n    const response = await axios.get(url)\n    console.log('response --> ', response)\n    return response\n  } catch (err) {\n    console.log('error --> ', err)\n    return null\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// src/app/fetchMethods.js","// removed by extract-text-webpack-plugin\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/_app.scss\n// module id = 378\n// module chunks = 0"],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;AACA;AACA;AADA;AAIA;AAAA;AACA;AAAA;AACA;;;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAIA;;;;AAjBA;AACA;AADA;AACA;AAmBA;;;;;;;;;;;;;;AACA;AACA;AACA;AAFA;AAaA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;;;;;AAbA;AACA;AACA;AACA;AACA;AACA;AACA;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AADA;AAHA;AAQA;;;;AAlCA;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAJA;AACA;AADA;AAAA;AAAA;AACA;AAMA;AAPA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;;;;;;;ACJA;;;;A","sourceRoot":""}